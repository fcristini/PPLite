From c97258871ba423f73ee329da45452d9e8e09a91e Mon Sep 17 00:00:00 2001
From: Enea Zaffanella <zaffanella@cs.unipr.it>
Date: Wed, 15 Mar 2017 09:23:11 +0100
Subject: [PATCH] First attempt at enabling compilation of the tests on
 Polyhedron.

---
 tests/Makefile.am            |  22 +-
 tests/Polyhedron/Makefile.am |  22 --
 tests/ppl_test.cc            | 157 -----------
 tests/ppl_test.hh            | 628 -------------------------------------------
 4 files changed, 16 insertions(+), 813 deletions(-)

diff --git a/tests/Makefile.am b/tests/Makefile.am
index 6d08b42..ccf5a9d 100644
--- a/tests/Makefile.am
+++ b/tests/Makefile.am
@@ -23,19 +23,29 @@
 
 SUBDIRS = \
 . \
-Concrete_Expression \
+Polyhedron \
 CO_Tree \
 PIP_Problem \
 Powerset \
-Partially_Reduced_Product \
-Box \
 MIP_Problem \
-Octagonal_Shape \
-BD_Shape \
-Polyhedron \
 Grid \
 Watchdog
 
+# SUBDIRS = \
+# . \
+# Concrete_Expression \
+# CO_Tree \
+# PIP_Problem \
+# Powerset \
+# Partially_Reduced_Product \
+# Box \
+# MIP_Problem \
+# Octagonal_Shape \
+# BD_Shape \
+# Polyhedron \
+# Grid \
+# Watchdog
+
 AM_CPPFLAGS = -I$(top_builddir)/src -I$(top_srcdir)/src @extra_includes@
 
 check_LIBRARIES = libppl_tests.a
diff --git a/tests/Polyhedron/Makefile.am b/tests/Polyhedron/Makefile.am
index e1415e2..956889c 100644
--- a/tests/Polyhedron/Makefile.am
+++ b/tests/Polyhedron/Makefile.am
@@ -89,10 +89,7 @@ exceptions1 exceptions2  exceptions3 \
 expandspacedim1 expandspacedim2 \
 foldspacedims1 foldspacedims2 \
 frequency1 \
-frombdshape1 \
-frombox1 frombox2 \
 fromgrid1 \
-fromoctagonalshape1 \
 generalizedaffineimage1 generalizedaffineimage2 \
 generalizedaffinepreimage1 generalizedaffinepreimage2 \
 generators1 \
@@ -183,10 +180,7 @@ nnc_equals1 \
 nnc_exceptions1 nnc_exceptions3 \
 nnc_expandspacedim1 \
 nnc_foldspacedims1 \
-nnc_frombdshape1 \
-nnc_frombox1 \
 nnc_fromgrid1 \
-nnc_fromoctagonalshape1 \
 nnc_generalizedaffineimage1 \
 nnc_generalizedaffinepreimage1 \
 nnc_generators1 \
@@ -314,15 +308,8 @@ foldspacedims2_SOURCES = foldspacedims2.cc
 
 frequency1_SOURCES = frequency1.cc
 
-frombdshape1_SOURCES = frombdshape1.cc
-
-frombox1_SOURCES = frombox1.cc
-frombox2_SOURCES = frombox2.cc
-
 fromgrid1_SOURCES = fromgrid1.cc
 
-fromoctagonalshape1_SOURCES = fromoctagonalshape1.cc
-
 generalizedaffineimage1_SOURCES = generalizedaffineimage1.cc
 generalizedaffineimage2_SOURCES = generalizedaffineimage2.cc
 
@@ -562,18 +549,9 @@ nnc_expandspacedim1_CXXFLAGS = $(DERIVED_CXXFLAGS)
 nnc_foldspacedims1_SOURCES = foldspacedims1.cc
 nnc_foldspacedims1_CXXFLAGS = $(DERIVED_CXXFLAGS)
 
-nnc_frombdshape1_SOURCES = frombdshape1.cc
-nnc_frombdshape1_CXXFLAGS = $(DERIVED_CXXFLAGS)
-
-nnc_frombox1_SOURCES = frombox1.cc
-nnc_frombox1_CXXFLAGS = $(DERIVED_CXXFLAGS)
-
 nnc_fromgrid1_SOURCES = fromgrid1.cc
 nnc_fromgrid1_CXXFLAGS = $(DERIVED_CXXFLAGS)
 
-nnc_fromoctagonalshape1_SOURCES = fromoctagonalshape1.cc
-nnc_fromoctagonalshape1_CXXFLAGS = $(DERIVED_CXXFLAGS)
-
 nnc_generalizedaffineimage1_SOURCES = generalizedaffineimage1.cc
 nnc_generalizedaffineimage1_CXXFLAGS = $(DERIVED_CXXFLAGS)
 
diff --git a/tests/ppl_test.cc b/tests/ppl_test.cc
index 825ef02..072bb8a 100644
--- a/tests/ppl_test.cc
+++ b/tests/ppl_test.cc
@@ -189,155 +189,6 @@ set_handlers() {
   std::set_terminate(uncaught_exception_handler);
 }
 
-bool
-check_distance(const Checked_Number<mpq_class, Extended_Number_Policy>& d,
-               const char* max_d_s, const char* d_name) {
-  Checked_Number<mpq_class, Extended_Number_Policy>
-    max_d((max_d_s ? max_d_s : "0"), ROUND_NOT_NEEDED);
-  assert(max_d >= 0);
-  if (d > max_d) {
-    nout << "Excessive " << d_name << " distance ";
-    if (is_plus_infinity(d))
-      nout << "+inf";
-    else if (raw_value(d) > std::numeric_limits<double>::max())
-      nout << ">" << std::numeric_limits<double>::max();
-    else
-      nout << raw_value(d).get_d() << " (rounded towards zero)";
-    nout << ": should be at most " << max_d << "."
-         << std::endl;
-    return false;
-  }
-  else
-    return true;
-}
-
-bool
-check_result(const BD_Shape<mpq_class>& computed_result,
-             const BD_Shape<mpq_class>& known_result) {
-  if (computed_result == known_result)
-    return true;
-  else {
-    using IO_Operators::operator<<;
-    nout << "Equality does not hold:"
-         << "\ncomputed result is\n"
-         << computed_result
-         << "\nknown result is\n"
-         << known_result
-         << endl;
-    return false;
-  }
-}
-
-bool
-check_result(const Rational_Box& computed_result,
-             const Rational_Box& known_result) {
-  if (computed_result == known_result)
-    return true;
-  else {
-    using IO_Operators::operator<<;
-    nout << "Equality does not hold:"
-         << "\ncomputed result is\n"
-         << computed_result
-         << "\nknown result is\n"
-         << known_result
-         << endl;
-    return false;
-  }
-}
-
-bool
-check_result(const Generator& computed_result,
-             const Generator& known_result,
-             const char* max_r_d_s,
-             const char* max_e_d_s,
-             const char* max_l_d_s) {
-  // Handle in a more efficient way the case where equality is expected.
-  if (max_r_d_s == 0 && max_e_d_s == 0 && max_l_d_s == 0) {
-    if (computed_result != known_result) {
-      using IO_Operators::operator<<;
-      nout << "Equality does not hold:"
-           << "\ncomputed result is\n"
-           << computed_result
-           << "\nknown result is\n"
-           << known_result
-           << endl;
-      return false;
-    }
-    else
-      return true;
-  }
-
-  Checked_Number<mpq_class, Extended_Number_Policy> r_d;
-  rectilinear_distance_assign(r_d, known_result, computed_result, ROUND_UP);
-  Checked_Number<mpq_class, Extended_Number_Policy> e_d;
-  euclidean_distance_assign(e_d, known_result, computed_result, ROUND_UP);
-  Checked_Number<mpq_class, Extended_Number_Policy> l_d;
-  l_infinity_distance_assign(l_d, known_result, computed_result, ROUND_UP);
-  bool ok_r = check_distance(r_d, max_r_d_s, "rectilinear");
-  bool ok_e = check_distance(e_d, max_e_d_s, "euclidean");
-  bool ok_l = check_distance(l_d, max_l_d_s, "l_infinity");
-  bool ok = ok_r && ok_e && ok_l;
-  if (!ok) {
-    using IO_Operators::operator<<;
-    nout << "Computed result is\n"
-         << computed_result
-         << "\nknown result is\n"
-         << known_result
-         << endl;
-  }
-  return ok;
-}
-
-bool
-check_result(const Checked_Number<mpq_class, Extended_Number_Policy>& computed,
-             const Checked_Number<mpq_class, Extended_Number_Policy>& known,
-             const char* max_r_d_s) {
-  // Handle in a more efficient way the case where equality is expected.
-  if (max_r_d_s == 0) {
-    if (computed != known) {
-      using IO_Operators::operator<<;
-      nout << "Equality does not hold:"
-           << "\ncomputed result is\n"
-           << computed
-           << "\nknown result is\n"
-           << known
-           << endl;
-      return false;
-    }
-    else
-      return true;
-  }
-
-  Checked_Number<mpq_class, Extended_Number_Policy> r_d;
-  sub_assign_r(r_d, known, computed, ROUND_NOT_NEEDED);
-  abs_assign_r(r_d, r_d, ROUND_NOT_NEEDED);
-  bool ok = check_distance(r_d, max_r_d_s, "rectilinear");
-  if (!ok) {
-    using IO_Operators::operator<<;
-    nout << "Computed result is\n"
-         << computed
-         << "\nknown result is\n"
-         << known
-         << endl;
-  }
-  return ok;
-}
-
-std::ostream&
-operator<<(std::ostream& s, const FCAIBVP& x) {
-  s << "{";
-  for (FCAIBVP::Set::const_iterator i = x.set.begin(),
-         x_end = x.set.end(); i != x_end; ) {
-    const Variable v(*i++);
-    using IO_Operators::operator<<;
-    s << v;
-    if (i != x_end)
-      s << ", ";
-  }
-  s << "}";
-  return s;
-}
-
 void
 print_constraint(const Constraint& c,
                  const std::string& intro, std::ostream& s) {
@@ -353,14 +204,6 @@ print_constraints(const Polyhedron& ph,
   print_constraints(ph.constraints(), intro, s);
 }
 
-#if 0
-void
-print_constraints(const Affine_Space& affs,
-                  const std::string& intro, std::ostream& s) {
-  print_constraints(affs.constraints(), intro, s);
-}
-#endif
-
 void
 print_constraints(const Constraint_System& cs,
                   const std::string& intro, std::ostream& s) {
diff --git a/tests/ppl_test.hh b/tests/ppl_test.hh
index b304750..23e2a8c 100644
--- a/tests/ppl_test.hh
+++ b/tests/ppl_test.hh
@@ -402,594 +402,6 @@ static noisy_ostream<char> vnout(std::cout, "PPL_VERY_NOISY_TESTS");
 void
 set_handlers();
 
-//! Utility typedef to allow a macro argument to denote the long double type.
-typedef long double long_double;
-
-struct Floating_Real_Open_Interval_Info_Policy {
-  const_bool_nodef(store_special, false);
-  const_bool_nodef(store_open, true);
-  const_bool_nodef(cache_empty, true);
-  const_bool_nodef(cache_singleton, true);
-  const_bool_nodef(cache_normalized, false);
-  const_int_nodef(next_bit, 0);
-  const_bool_nodef(may_be_empty, true);
-  const_bool_nodef(may_contain_infinity, false);
-  const_bool_nodef(check_empty_result, false);
-  const_bool_nodef(check_inexact, false);
-};
-
-struct Floating_Real_Closed_Interval_Info_Policy {
-  const_bool_nodef(store_special, false);
-  const_bool_nodef(store_open, false);
-  const_bool_nodef(cache_empty, false);
-  const_bool_nodef(cache_singleton, true);
-  const_bool_nodef(cache_normalized, false);
-  const_int_nodef(next_bit, 0);
-  const_bool_nodef(may_be_empty, false);
-  const_bool_nodef(may_contain_infinity, false);
-  const_bool_nodef(check_empty_result, false);
-  const_bool_nodef(check_inexact, false);
-};
-
-typedef Interval_Info_Bitset<unsigned int,
-                             Floating_Real_Open_Interval_Info_Policy> Floating_Real_Open_Interval_Info;
-
-typedef Interval<float, Floating_Real_Open_Interval_Info> fl_r_oc;
-typedef Interval<double, Floating_Real_Open_Interval_Info> db_r_oc;
-typedef Interval<long double, Floating_Real_Open_Interval_Info> ld_r_oc;
-
-struct Rational_Real_Open_Interval_Info_Policy {
-  const_bool_nodef(store_special, true);
-  const_bool_nodef(store_open, true);
-  const_bool_nodef(cache_empty, true);
-  const_bool_nodef(cache_singleton, true);
-  const_bool_nodef(cache_normalized, false);
-  const_int_nodef(next_bit, 0);
-  const_bool_nodef(may_be_empty, true);
-  const_bool_nodef(may_contain_infinity, false);
-  const_bool_nodef(check_empty_result, false);
-  const_bool_nodef(check_inexact, false);
-};
-
-typedef Interval_Info_Bitset<unsigned int,
-                             Rational_Real_Open_Interval_Info_Policy> Rational_Real_Open_Interval_Info;
-
-typedef Interval<mpq_class, Rational_Real_Open_Interval_Info> rt_r_oc;
-
-//! The incarnation of Box under test.
-typedef Box<BOX_INSTANCE> TBox;
-
-//! The incarnation of BD_Shape under test.
-typedef BD_Shape<BD_SHAPE_INSTANCE> TBD_Shape;
-
-//! The incarnation of Octagonal_Shape under test.
-typedef Octagonal_Shape<OCTAGONAL_SHAPE_INSTANCE> TOctagonal_Shape;
-
-// For floating point analysis.
-#ifdef ANALYZER_FP_FORMAT
-#ifdef ANALYZED_FP_FORMAT
-//! The type of an interval with floating point boundaries.
-typedef Interval<ANALYZER_FP_FORMAT,
-                 Floating_Real_Open_Interval_Info> FP_Interval;
-
-//! The type of an interval linear form.
-typedef Linear_Form<FP_Interval> FP_Linear_Form;
-
-//! The type of an interval abstract store.
-typedef Box<FP_Interval> FP_Interval_Abstract_Store;
-
-//! The type of a linear form abstract store.
-typedef std::map<dimension_type, FP_Linear_Form>
-                                 FP_Linear_Form_Abstract_Store;
-
-/*! \brief
-  The incarnation of BD_Shape under test for analyzing
-  floating point computations.
-*/
-typedef BD_Shape<ANALYZER_FP_FORMAT> FP_BD_Shape;
-
-/*! \brief
-  The incarnation of Octagonal_Shape under test for analyzing
-  floating point computations.
-*/
-typedef Octagonal_Shape<ANALYZER_FP_FORMAT> FP_Octagonal_Shape;
-#endif // ANALYZED_FP_FORMAT
-#endif // ANALYZER_FP_FORMAT
-
-template <typename Shape>
-inline bool
-has_exact_coefficient_type(const Shape&) {
-  return std::numeric_limits<typename Shape::coefficient_type>::is_exact;
-}
-
-template <typename Interval>
-inline bool
-has_exact_coefficient_type(const Box<Interval>&) {
-  return std::numeric_limits<typename Interval::boundary_type>::is_exact;
-}
-
-bool
-check_distance(const Checked_Number<mpq_class, Extended_Number_Policy>& d,
-               const char* max_d_s, const char* d_name);
-
-template <typename T>
-bool
-check_result_i(const BD_Shape<T>& computed_result,
-               const BD_Shape<mpq_class>& known_result,
-               const char* max_r_d_s,
-               const char* max_e_d_s,
-               const char* max_l_d_s) {
-  BD_Shape<mpq_class> q_computed_result(computed_result);
-  // Handle in a more efficient way the case where equality is expected.
-  if (max_r_d_s == 0 && max_e_d_s == 0 && max_l_d_s == 0) {
-    if (q_computed_result != known_result) {
-      using IO_Operators::operator<<;
-      nout << "Equality does not hold:"
-           << "\ncomputed result is\n"
-           << q_computed_result
-           << "\nknown result is\n"
-           << known_result
-           << std::endl;
-      return false;
-    }
-    else
-      return true;
-  }
-
-  if (!q_computed_result.contains(known_result)) {
-    using IO_Operators::operator<<;
-    nout << "Containment does not hold:"
-         << "\ncomputed result is\n"
-         << q_computed_result
-         << "\nknown result is\n"
-         << known_result
-         << std::endl;
-    return false;
-  }
-
-  Checked_Number<mpq_class, Extended_Number_Policy> r_d;
-  rectilinear_distance_assign(r_d, known_result, q_computed_result, ROUND_UP);
-  Checked_Number<mpq_class, Extended_Number_Policy> e_d;
-  euclidean_distance_assign(e_d, known_result, q_computed_result, ROUND_UP);
-  Checked_Number<mpq_class, Extended_Number_Policy> l_d;
-  l_infinity_distance_assign(l_d, known_result, q_computed_result, ROUND_UP);
-  bool ok_r = check_distance(r_d, max_r_d_s, "rectilinear");
-  bool ok_e = check_distance(e_d, max_e_d_s, "euclidean");
-  bool ok_l = check_distance(l_d, max_l_d_s, "l_infinity");
-  bool ok = ok_r && ok_e && ok_l;
-  if (!ok) {
-    using IO_Operators::operator<<;
-    nout << "Computed result is\n"
-         << q_computed_result
-         << "\nknown result is\n"
-         << known_result
-         << std::endl;
-  }
-  return ok;
-}
-
-template <typename T>
-bool
-check_result(const BD_Shape<T>& computed_result,
-             const BD_Shape<mpq_class>& known_result,
-             const char* max_r_d_s,
-             const char* max_e_d_s,
-             const char* max_l_d_s) {
-  return std::numeric_limits<T>::is_integer
-    ? check_result_i(computed_result, known_result,
-                     "+inf", "+inf", "+inf")
-    : check_result_i(computed_result, known_result,
-                     max_r_d_s, max_e_d_s, max_l_d_s);
-}
-
-template <typename T>
-bool
-check_result(const BD_Shape<T>& computed_result,
-             const BD_Shape<T>& known_result) {
-  if (computed_result == known_result)
-    return true;
-  else {
-    using IO_Operators::operator<<;
-    nout << "Equality does not hold:"
-         << "\ncomputed result is\n"
-         << computed_result
-         << "\nknown result is\n"
-         << known_result
-         << std::endl;
-    return false;
-  }
-}
-
-template <typename T>
-bool
-check_result(const BD_Shape<T>& computed_result,
-             const BD_Shape<mpq_class>& known_result) {
-  return std::numeric_limits<T>::is_integer
-    ? check_result_i(computed_result, known_result, "+inf", "+inf", "+inf")
-    : check_result_i(computed_result, known_result, 0, 0, 0);
-}
-
-bool
-check_result(const BD_Shape<mpq_class>& computed_result,
-             const BD_Shape<mpq_class>& known_result);
-
-template <typename T>
-bool
-check_result_i(const Octagonal_Shape<T>& computed_result,
-               const Octagonal_Shape<mpq_class>& known_result,
-               const char* max_r_d_s,
-               const char* max_e_d_s,
-               const char* max_l_d_s) {
-  Octagonal_Shape<mpq_class> q_computed_result(computed_result);
-  // Handle in a more efficient way the case where equality is expected.
-  if (max_r_d_s == 0 && max_e_d_s == 0 && max_l_d_s == 0) {
-    if (q_computed_result != known_result) {
-      using IO_Operators::operator<<;
-      nout << "Equality does not hold:"
-           << "\ncomputed result is\n"
-           << q_computed_result
-           << "\nknown result is\n"
-           << known_result
-           << std::endl;
-      return false;
-    }
-    else
-      return true;
-  }
-
-  if (!q_computed_result.contains(known_result)) {
-    using IO_Operators::operator<<;
-    nout << "Containment does not hold:"
-         << "\ncomputed result is\n"
-         << q_computed_result
-         << "\nknown result is\n"
-         << known_result
-         << std::endl;
-    return false;
-  }
-
-  Checked_Number<mpq_class, Extended_Number_Policy> r_d;
-  rectilinear_distance_assign(r_d, known_result, q_computed_result, ROUND_UP);
-  Checked_Number<mpq_class, Extended_Number_Policy> e_d;
-  euclidean_distance_assign(e_d, known_result, q_computed_result, ROUND_UP);
-  Checked_Number<mpq_class, Extended_Number_Policy> l_d;
-  l_infinity_distance_assign(l_d, known_result, q_computed_result, ROUND_UP);
-  bool ok_r = check_distance(r_d, max_r_d_s, "rectilinear");
-  bool ok_e = check_distance(e_d, max_e_d_s, "euclidean");
-  bool ok_l = check_distance(l_d, max_l_d_s, "l_infinity");
-  bool ok = ok_r && ok_e && ok_l;
-  if (!ok) {
-    using IO_Operators::operator<<;
-    nout << "Computed result is\n"
-         << q_computed_result
-         << "\nknown result is\n"
-         << known_result
-         << std::endl;
-  }
-  return ok;
-}
-
-template <typename T>
-bool
-check_result(const Octagonal_Shape<T>& computed_result,
-             const Octagonal_Shape<mpq_class>& known_result,
-             const char* max_r_d_s,
-             const char* max_e_d_s,
-             const char* max_l_d_s) {
-  return std::numeric_limits<T>::is_integer
-    ? check_result_i(computed_result, known_result,
-                     "+inf", "+inf", "+inf")
-    : check_result_i(computed_result, known_result,
-                     max_r_d_s, max_e_d_s, max_l_d_s);
-}
-
-template <>
-inline bool
-check_result(const Octagonal_Shape<mpq_class>& computed_result,
-             const Octagonal_Shape<mpq_class>& known_result,
-             const char*,
-             const char*,
-             const char*) {
-  return check_result_i(computed_result, known_result,
-                        0, 0, 0);
-}
-
-template <typename T>
-bool
-check_result(const Octagonal_Shape<T>& computed_result,
-             const Octagonal_Shape<mpq_class>& known_result) {
-  return std::numeric_limits<T>::is_integer
-    ? check_result_i(computed_result, known_result, "+inf", "+inf", "+inf")
-    : check_result_i(computed_result, known_result, 0, 0, 0);
-}
-
-
-template <typename Interval>
-bool
-check_result_i(const Box<Interval>& computed_result,
-               const Rational_Box& known_result,
-               const char* max_r_d_s,
-               const char* max_e_d_s,
-               const char* max_l_d_s) {
-  Rational_Box q_computed_result(computed_result);
-  // Handle in a more efficient way the case where equality is expected.
-  if (max_r_d_s == 0 && max_e_d_s == 0 && max_l_d_s == 0) {
-    if (q_computed_result != known_result) {
-      using IO_Operators::operator<<;
-      nout << "Equality does not hold:"
-           << "\ncomputed result is\n"
-           << q_computed_result
-           << "\nknown result is\n"
-           << known_result
-           << std::endl;
-      return false;
-    }
-    else
-      return true;
-  }
-
-  if (!q_computed_result.contains(known_result)) {
-    using IO_Operators::operator<<;
-    nout << "Containment does not hold:"
-         << "\ncomputed result is\n"
-         << q_computed_result
-         << "\nknown result is\n"
-         << known_result
-         << std::endl;
-    nout << "Individual dimensions where containment does not hold"
-         << "\n(Variable: computed-result known-result):\n";
-    for (dimension_type i = 0; i < computed_result.space_dimension(); ++i) {
-      if (!q_computed_result.get_interval(Variable(i))
-          .contains(known_result.get_interval(Variable(i)))) {
-        using IO_Operators::operator<<;
-        nout << Variable(i) << ": "
-             << q_computed_result.get_interval(Variable(i))
-             << ' '
-             << known_result.get_interval(Variable(i))
-             << std::endl;
-      }
-    }
-    return false;
-  }
-
-  Checked_Number<mpq_class, Extended_Number_Policy> r_d;
-  rectilinear_distance_assign(r_d, known_result, q_computed_result, ROUND_UP);
-  Checked_Number<mpq_class, Extended_Number_Policy> e_d;
-  euclidean_distance_assign(e_d, known_result, q_computed_result, ROUND_UP);
-  Checked_Number<mpq_class, Extended_Number_Policy> l_d;
-  l_infinity_distance_assign(l_d, known_result, q_computed_result, ROUND_UP);
-  bool ok_r = check_distance(r_d, max_r_d_s, "rectilinear");
-  bool ok_e = check_distance(e_d, max_e_d_s, "euclidean");
-  bool ok_l = check_distance(l_d, max_l_d_s, "l_infinity");
-  bool ok = ok_r && ok_e && ok_l;
-  if (!ok) {
-    using IO_Operators::operator<<;
-    nout << "Computed result is\n"
-         << q_computed_result
-         << "\nknown result is\n"
-         << known_result
-         << std::endl;
-  }
-  return ok;
-}
-
-template <typename Interval>
-bool
-check_result(const Box<Interval>& computed_result,
-             const Rational_Box& known_result,
-             const char* max_r_d_s,
-             const char* max_e_d_s,
-             const char* max_l_d_s) {
-  return std::numeric_limits<typename Interval::boundary_type>::is_integer
-    ? check_result_i(computed_result, known_result,
-                     "+inf", "+inf", "+inf")
-    : check_result_i(computed_result, known_result,
-                     max_r_d_s, max_e_d_s, max_l_d_s);
-}
-
-template <typename Interval>
-bool
-check_result(const Box<Interval>& computed_result,
-             const Box<Interval>& known_result) {
-  if (computed_result == known_result)
-    return true;
-  else {
-    using IO_Operators::operator<<;
-    nout << "Equality does not hold:"
-         << "\ncomputed result is\n"
-         << computed_result
-         << "\nknown result is\n"
-         << known_result
-         << std::endl;
-    return false;
-  }
-}
-
-template <typename Interval>
-bool
-check_result(const Box<Interval>& computed_result,
-             const Rational_Box& known_result) {
-  return std::numeric_limits<typename Interval::boundary_type>::is_integer
-    ? check_result_i(computed_result, known_result, "+inf", "+inf", "+inf")
-    : check_result_i(computed_result, known_result, 0, 0, 0);
-}
-
-bool
-check_result(const Rational_Box& computed_result,
-             const Rational_Box& known_result);
-
-bool
-check_result(const Generator& computed_result,
-             const Generator& known_result,
-             const char* max_r_d_s,
-             const char* max_e_d_s,
-             const char* max_l_d_s);
-
-bool
-check_result(const Checked_Number<mpq_class, Extended_Number_Policy>& computed,
-             const Checked_Number<mpq_class, Extended_Number_Policy>& known,
-             const char* max_r_d_s);
-
-class FCAIBVP;
-
-bool
-operator==(const FCAIBVP& x, const FCAIBVP& y);
-
-bool
-operator!=(const FCAIBVP& x, const FCAIBVP& y);
-
-std::ostream&
-operator<<(std::ostream& s, const FCAIBVP& x);
-
-/*! \brief
-  A class for representing Finite Conjunctions of Attribute
-  Independent Boolean Variable Properties.
-*/
-class FCAIBVP {
-private:
-  typedef size_t dim_t;
-
-  typedef std::set<dim_t> Set;
-
-  Set set;
-
-public:
-  FCAIBVP();
-
-  explicit FCAIBVP(const Variable x);
-
-  explicit FCAIBVP(const Variables_Set& y);
-
-  FCAIBVP(const FCAIBVP& y, unsigned offset);
-
-  memory_size_type total_memory_in_bytes() const;
-
-  memory_size_type external_memory_in_bytes() const;
-
-  bool is_top() const;
-
-  bool is_bottom() const;
-
-  bool definitely_entails(const FCAIBVP& y) const;
-
-  void upper_bound_assign(const FCAIBVP& y);
-
-  void difference_assign(const FCAIBVP& y);
-
-  void meet_assign(const FCAIBVP& y);
-
-  void weakening_assign(const FCAIBVP& y);
-
-  static bool has_nontrivial_weakening();
-
-  bool OK() const;
-
-  friend std::ostream&
-  Parma_Polyhedra_Library::Test::operator<<(std::ostream& s,
-                                            const FCAIBVP& x);
-};
-
-inline
-FCAIBVP::FCAIBVP()
-  : set() {
-}
-
-inline
-FCAIBVP::FCAIBVP(const Variable x)
-  : set() {
-  set.insert(x.id());
-}
-
-inline
-FCAIBVP::FCAIBVP(const Variables_Set& y)
-  : set() {
-  for (Variables_Set::const_iterator i = y.begin(),
-         y_end = y.end(); i != y_end; ++i)
-    set.insert(*i);
-}
-
-inline
-FCAIBVP::FCAIBVP(const FCAIBVP& y, unsigned offset)
-  : set() {
-  for (Set::const_iterator i = y.set.begin(),
-         y_set_end = y.set.end(); i != y_set_end; ++i)
-    set.insert(*i + offset);
-}
-
-inline memory_size_type
-FCAIBVP::total_memory_in_bytes() const {
-  return 1;
-}
-
-inline bool
-FCAIBVP::is_top() const {
-  return set.empty();
-}
-
-inline bool
-FCAIBVP::is_bottom() const {
-  return false;
-}
-
-inline bool
-FCAIBVP::definitely_entails(const FCAIBVP& y) const{
-  const FCAIBVP& x = *this;
-  return std::includes(x.set.begin(), x.set.end(),
-                       y.set.begin(), y.set.end());
-}
-
-inline void
-FCAIBVP::upper_bound_assign(const FCAIBVP& y) {
-  FCAIBVP& x = *this;
-  FCAIBVP z;
-  std::set_intersection(x.set.begin(), x.set.end(),
-                        y.set.begin(), y.set.end(),
-                        std::inserter(z.set, z.set.begin()));
-  using std::swap;
-  swap(x, z);
-}
-
-inline void
-FCAIBVP::difference_assign(const FCAIBVP& y) {
-  FCAIBVP& x = *this;
-  FCAIBVP z;
-  std::set_difference(x.set.begin(), x.set.end(),
-                      y.set.begin(), y.set.end(),
-                      std::inserter(z.set, z.set.begin()));
-  using std::swap;
-  swap(x, z);
-}
-
-inline void
-FCAIBVP::meet_assign(const FCAIBVP& y) {
-  set.insert(y.set.begin(), y.set.end());
-}
-
-inline void
-FCAIBVP::weakening_assign(const FCAIBVP& y) {
-  difference_assign(y);
-}
-
-inline bool
-FCAIBVP::has_nontrivial_weakening() {
-  return true;
-}
-
-inline bool
-FCAIBVP::OK() const {
-  return true;
-}
-
-inline bool
-operator==(const FCAIBVP& x, const FCAIBVP& y) {
-  return x.definitely_entails(y) && y.definitely_entails(x);
-}
-
-inline bool
-operator!=(const FCAIBVP& x, const FCAIBVP& y) {
-  return !(x == y);
-}
-
 void
 print_constraint(const Constraint& c,
                  const std::string& intro = "",
@@ -1005,46 +417,6 @@ print_constraints(const Polyhedron& ph,
                   const std::string& intro = "",
                   std::ostream& s = nout);
 
-#if 0
-void
-print_constraints(const Affine_Space& affs,
-                  const std::string& intro = "",
-                  std::ostream& s = nout);
-#endif
-
-template <typename Interval>
-void
-print_constraints(const Box<Interval>& box,
-                  const std::string& intro = "",
-                  std::ostream& s = nout) {
-  if (!intro.empty())
-    s << intro << std::endl;
-  using IO_Operators::operator<<;
-  s << box << std::endl;
-}
-
-template <typename T>
-void
-print_constraints(const BD_Shape<T>& bd,
-                  const std::string& intro = "",
-                  std::ostream& s = nout) {
-  if (!intro.empty())
-    s << intro << std::endl;
-  using IO_Operators::operator<<;
-  s << bd << std::endl;
-}
-
-template <typename T>
-void
-print_constraints(const Octagonal_Shape<T>& oc,
-                  const std::string& intro = "",
-                  std::ostream& s = nout) {
-  if (!intro.empty())
-    s << intro << std::endl;
-  using IO_Operators::operator<<;
-  s << oc << std::endl;
-}
-
 template <typename PH>
 void
 print_constraints(const Pointset_Powerset<PH>& pps,
-- 
1.9.1

